import { ClientBase } from './client.base';
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken('API_BASE_URL');

export interface IIncidentAlertClient {
    get(id: number): Observable<IncidentAlertDto>;
    create(dto: IncidentAlertDto): Observable<IncidentAlertDto>;
    update(dto: IncidentAlertDto): Observable<IncidentAlertDto>;
}

@Injectable()
export class IncidentAlertClient extends ClientBase implements IIncidentAlertClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    get(id: number): Observable<IncidentAlertDto> {
        let url_ = this.baseUrl + "/api/IncidentAlert/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IncidentAlertDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IncidentAlertDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<IncidentAlertDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IncidentAlertDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: IncidentAlertDto): Observable<IncidentAlertDto> {
        let url_ = this.baseUrl + "/api/IncidentAlert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IncidentAlertDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IncidentAlertDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<IncidentAlertDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IncidentAlertDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: IncidentAlertDto): Observable<IncidentAlertDto> {
        let url_ = this.baseUrl + "/api/IncidentAlert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IncidentAlertDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IncidentAlertDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<IncidentAlertDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IncidentAlertDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IJsaClient {
    get(id: number): Observable<JsaDto>;
    create(dto: JsaDto): Observable<JsaDto>;
    update(dto: JsaDto): Observable<JsaDto>;
}

@Injectable()
export class JsaClient extends ClientBase implements IJsaClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    get(id: number): Observable<JsaDto> {
        let url_ = this.baseUrl + "/api/Jsa/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JsaDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JsaDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<JsaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JsaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: JsaDto): Observable<JsaDto> {
        let url_ = this.baseUrl + "/api/Jsa";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JsaDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JsaDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<JsaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JsaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: JsaDto): Observable<JsaDto> {
        let url_ = this.baseUrl + "/api/Jsa";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<JsaDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<JsaDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<JsaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JsaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IMotorizedEquipmentClient {
    get(id: number): Observable<MotorizedEquipmentDto>;
    create(dto: MotorizedEquipmentDto): Observable<MotorizedEquipmentDto>;
    update(dto: MotorizedEquipmentDto): Observable<MotorizedEquipmentDto>;
}

@Injectable()
export class MotorizedEquipmentClient extends ClientBase implements IMotorizedEquipmentClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    get(id: number): Observable<MotorizedEquipmentDto> {
        let url_ = this.baseUrl + "/api/MotorizedEquipment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MotorizedEquipmentDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MotorizedEquipmentDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<MotorizedEquipmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MotorizedEquipmentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: MotorizedEquipmentDto): Observable<MotorizedEquipmentDto> {
        let url_ = this.baseUrl + "/api/MotorizedEquipment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MotorizedEquipmentDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MotorizedEquipmentDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<MotorizedEquipmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MotorizedEquipmentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: MotorizedEquipmentDto): Observable<MotorizedEquipmentDto> {
        let url_ = this.baseUrl + "/api/MotorizedEquipment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MotorizedEquipmentDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MotorizedEquipmentDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<MotorizedEquipmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MotorizedEquipmentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface INearMissClient {
    get(id: number): Observable<NearMissDto>;
    create(dto: NearMissDto): Observable<NearMissDto>;
    update(dto: NearMissDto): Observable<NearMissDto>;
}

@Injectable()
export class NearMissClient extends ClientBase implements INearMissClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    get(id: number): Observable<NearMissDto> {
        let url_ = this.baseUrl + "/api/NearMiss/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NearMissDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NearMissDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<NearMissDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NearMissDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: NearMissDto): Observable<NearMissDto> {
        let url_ = this.baseUrl + "/api/NearMiss";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NearMissDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NearMissDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<NearMissDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NearMissDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: NearMissDto): Observable<NearMissDto> {
        let url_ = this.baseUrl + "/api/NearMiss";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NearMissDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NearMissDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<NearMissDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NearMissDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISiteSafetyOrientationClient {
    get(id: number): Observable<SiteSafetyOrientationDto>;
    create(dto: SiteSafetyOrientationDto): Observable<SiteSafetyOrientationDto>;
    update(dto: SiteSafetyOrientationDto): Observable<SiteSafetyOrientationDto>;
}

@Injectable()
export class SiteSafetyOrientationClient extends ClientBase implements ISiteSafetyOrientationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    get(id: number): Observable<SiteSafetyOrientationDto> {
        let url_ = this.baseUrl + "/api/SiteSafetyOrientation/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SiteSafetyOrientationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SiteSafetyOrientationDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SiteSafetyOrientationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SiteSafetyOrientationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: SiteSafetyOrientationDto): Observable<SiteSafetyOrientationDto> {
        let url_ = this.baseUrl + "/api/SiteSafetyOrientation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SiteSafetyOrientationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SiteSafetyOrientationDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<SiteSafetyOrientationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SiteSafetyOrientationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: SiteSafetyOrientationDto): Observable<SiteSafetyOrientationDto> {
        let url_ = this.baseUrl + "/api/SiteSafetyOrientation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SiteSafetyOrientationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SiteSafetyOrientationDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<SiteSafetyOrientationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SiteSafetyOrientationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IToolboxMeetingClient {
    get(id: number): Observable<ToolboxMeetingDto>;
    create(dto: ToolboxMeetingDto): Observable<ToolboxMeetingDto>;
    update(dto: ToolboxMeetingDto): Observable<ToolboxMeetingDto>;
}

@Injectable()
export class ToolboxMeetingClient extends ClientBase implements IToolboxMeetingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    get(id: number): Observable<ToolboxMeetingDto> {
        let url_ = this.baseUrl + "/api/ToolboxMeeting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ToolboxMeetingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ToolboxMeetingDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ToolboxMeetingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ToolboxMeetingDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: ToolboxMeetingDto): Observable<ToolboxMeetingDto> {
        let url_ = this.baseUrl + "/api/ToolboxMeeting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ToolboxMeetingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ToolboxMeetingDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ToolboxMeetingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ToolboxMeetingDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: ToolboxMeetingDto): Observable<ToolboxMeetingDto> {
        let url_ = this.baseUrl + "/api/ToolboxMeeting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ToolboxMeetingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ToolboxMeetingDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ToolboxMeetingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ToolboxMeetingDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUtilsClient {
    angularServiceCode(): Observable<string>;
    testEmail(): Observable<FileResponse | null>;
}

@Injectable()
export class UtilsClient extends ClientBase implements IUtilsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    angularServiceCode(): Observable<string> {
        let url_ = this.baseUrl + "/api/Utils/angular";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAngularServiceCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAngularServiceCode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAngularServiceCode(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    testEmail(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Utils/email";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processTestEmail(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAlertTimeClient {
    getAll(): Observable<AlertTimeDto[]>;
    create(dto: AlertTimeDto): Observable<AlertTimeDto>;
    update(dto: AlertTimeDto): Observable<AlertTimeDto>;
    get(id: number): Observable<AlertTimeDto>;
    delete(id: number): Observable<AlertTimeDto>;
}

@Injectable()
export class AlertTimeClient extends ClientBase implements IAlertTimeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<AlertTimeDto[]> {
        let url_ = this.baseUrl + "/api/AlertTime";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AlertTimeDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AlertTimeDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<AlertTimeDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AlertTimeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: AlertTimeDto): Observable<AlertTimeDto> {
        let url_ = this.baseUrl + "/api/AlertTime";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AlertTimeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AlertTimeDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<AlertTimeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AlertTimeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: AlertTimeDto): Observable<AlertTimeDto> {
        let url_ = this.baseUrl + "/api/AlertTime";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AlertTimeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AlertTimeDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<AlertTimeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AlertTimeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<AlertTimeDto> {
        let url_ = this.baseUrl + "/api/AlertTime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AlertTimeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AlertTimeDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<AlertTimeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AlertTimeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<AlertTimeDto> {
        let url_ = this.baseUrl + "/api/AlertTime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AlertTimeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AlertTimeDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<AlertTimeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AlertTimeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IControlMethodClient {
    getAll(): Observable<ControlMethodDto[]>;
    create(dto: ControlMethodDto): Observable<ControlMethodDto>;
    update(dto: ControlMethodDto): Observable<ControlMethodDto>;
    get(id: number): Observable<ControlMethodDto>;
    delete(id: number): Observable<ControlMethodDto>;
}

@Injectable()
export class ControlMethodClient extends ClientBase implements IControlMethodClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<ControlMethodDto[]> {
        let url_ = this.baseUrl + "/api/ControlMethod";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ControlMethodDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ControlMethodDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ControlMethodDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ControlMethodDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: ControlMethodDto): Observable<ControlMethodDto> {
        let url_ = this.baseUrl + "/api/ControlMethod";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ControlMethodDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ControlMethodDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ControlMethodDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ControlMethodDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: ControlMethodDto): Observable<ControlMethodDto> {
        let url_ = this.baseUrl + "/api/ControlMethod";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ControlMethodDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ControlMethodDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ControlMethodDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ControlMethodDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<ControlMethodDto> {
        let url_ = this.baseUrl + "/api/ControlMethod/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ControlMethodDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ControlMethodDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ControlMethodDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ControlMethodDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<ControlMethodDto> {
        let url_ = this.baseUrl + "/api/ControlMethod/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ControlMethodDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ControlMethodDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ControlMethodDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ControlMethodDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDepartmentClient {
    getAll(): Observable<DepartmentDto[]>;
    create(dto: DepartmentDto): Observable<DepartmentDto>;
    update(dto: DepartmentDto): Observable<DepartmentDto>;
    get(id: number): Observable<DepartmentDto>;
    delete(id: number): Observable<DepartmentDto>;
}

@Injectable()
export class DepartmentClient extends ClientBase implements IDepartmentClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<DepartmentDto[]> {
        let url_ = this.baseUrl + "/api/Department";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartmentDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartmentDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<DepartmentDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DepartmentDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: DepartmentDto): Observable<DepartmentDto> {
        let url_ = this.baseUrl + "/api/Department";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartmentDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartmentDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<DepartmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DepartmentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: DepartmentDto): Observable<DepartmentDto> {
        let url_ = this.baseUrl + "/api/Department";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartmentDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartmentDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<DepartmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DepartmentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<DepartmentDto> {
        let url_ = this.baseUrl + "/api/Department/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartmentDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartmentDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<DepartmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DepartmentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<DepartmentDto> {
        let url_ = this.baseUrl + "/api/Department/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartmentDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartmentDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<DepartmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DepartmentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDivisionClient {
    getAll(): Observable<DivisionDto[]>;
    create(dto: DivisionDto): Observable<DivisionDto>;
    update(dto: DivisionDto): Observable<DivisionDto>;
    get(id: number): Observable<DivisionDto>;
    delete(id: number): Observable<DivisionDto>;
}

@Injectable()
export class DivisionClient extends ClientBase implements IDivisionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<DivisionDto[]> {
        let url_ = this.baseUrl + "/api/Division";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DivisionDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DivisionDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<DivisionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DivisionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: DivisionDto): Observable<DivisionDto> {
        let url_ = this.baseUrl + "/api/Division";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DivisionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DivisionDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<DivisionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DivisionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: DivisionDto): Observable<DivisionDto> {
        let url_ = this.baseUrl + "/api/Division";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DivisionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DivisionDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<DivisionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DivisionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<DivisionDto> {
        let url_ = this.baseUrl + "/api/Division/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DivisionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DivisionDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<DivisionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DivisionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<DivisionDto> {
        let url_ = this.baseUrl + "/api/Division/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DivisionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DivisionDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<DivisionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DivisionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGoodCatchTypeClient {
    getAll(): Observable<GoodCatchTypeDto[]>;
    create(dto: GoodCatchTypeDto): Observable<GoodCatchTypeDto>;
    update(dto: GoodCatchTypeDto): Observable<GoodCatchTypeDto>;
    get(id: number): Observable<GoodCatchTypeDto>;
    delete(id: number): Observable<GoodCatchTypeDto>;
}

@Injectable()
export class GoodCatchTypeClient extends ClientBase implements IGoodCatchTypeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<GoodCatchTypeDto[]> {
        let url_ = this.baseUrl + "/api/GoodCatchType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GoodCatchTypeDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GoodCatchTypeDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<GoodCatchTypeDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GoodCatchTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: GoodCatchTypeDto): Observable<GoodCatchTypeDto> {
        let url_ = this.baseUrl + "/api/GoodCatchType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GoodCatchTypeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GoodCatchTypeDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<GoodCatchTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GoodCatchTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: GoodCatchTypeDto): Observable<GoodCatchTypeDto> {
        let url_ = this.baseUrl + "/api/GoodCatchType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GoodCatchTypeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GoodCatchTypeDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<GoodCatchTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GoodCatchTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<GoodCatchTypeDto> {
        let url_ = this.baseUrl + "/api/GoodCatchType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GoodCatchTypeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GoodCatchTypeDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<GoodCatchTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GoodCatchTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<GoodCatchTypeDto> {
        let url_ = this.baseUrl + "/api/GoodCatchType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GoodCatchTypeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GoodCatchTypeDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<GoodCatchTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GoodCatchTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface INearMissTypeClient {
    getAll(): Observable<NearMissTypeDto[]>;
    create(dto: NearMissTypeDto): Observable<NearMissTypeDto>;
    update(dto: NearMissTypeDto): Observable<NearMissTypeDto>;
    get(id: number): Observable<NearMissTypeDto>;
    delete(id: number): Observable<NearMissTypeDto>;
}

@Injectable()
export class NearMissTypeClient extends ClientBase implements INearMissTypeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<NearMissTypeDto[]> {
        let url_ = this.baseUrl + "/api/NearMissType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NearMissTypeDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NearMissTypeDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<NearMissTypeDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NearMissTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: NearMissTypeDto): Observable<NearMissTypeDto> {
        let url_ = this.baseUrl + "/api/NearMissType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NearMissTypeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NearMissTypeDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<NearMissTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NearMissTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: NearMissTypeDto): Observable<NearMissTypeDto> {
        let url_ = this.baseUrl + "/api/NearMissType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NearMissTypeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NearMissTypeDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<NearMissTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NearMissTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<NearMissTypeDto> {
        let url_ = this.baseUrl + "/api/NearMissType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NearMissTypeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NearMissTypeDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<NearMissTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NearMissTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<NearMissTypeDto> {
        let url_ = this.baseUrl + "/api/NearMissType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NearMissTypeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NearMissTypeDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<NearMissTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NearMissTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IProjectClient {
    getAll(): Observable<ProjectDto[]>;
    create(dto: ProjectDto): Observable<ProjectDto>;
    update(dto: ProjectDto): Observable<ProjectDto>;
    get(id: number): Observable<ProjectDto>;
    delete(id: number): Observable<ProjectDto>;
}

@Injectable()
export class ProjectClient extends ClientBase implements IProjectClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<ProjectDto[]> {
        let url_ = this.baseUrl + "/api/Project";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjectDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjectDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ProjectDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProjectDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: ProjectDto): Observable<ProjectDto> {
        let url_ = this.baseUrl + "/api/Project";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjectDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjectDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ProjectDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: ProjectDto): Observable<ProjectDto> {
        let url_ = this.baseUrl + "/api/Project";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjectDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjectDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ProjectDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<ProjectDto> {
        let url_ = this.baseUrl + "/api/Project/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjectDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjectDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ProjectDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<ProjectDto> {
        let url_ = this.baseUrl + "/api/Project/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProjectDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProjectDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ProjectDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProjectDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IWorkoutClient {
    getAll(): Observable<WorkoutDto[]>;
    create(dto: WorkoutDto): Observable<WorkoutDto>;
    update(dto: WorkoutDto): Observable<WorkoutDto>;
    get(id: number): Observable<WorkoutDto>;
    delete(id: number): Observable<WorkoutDto>;
}

@Injectable()
export class WorkoutClient extends ClientBase implements IWorkoutClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<WorkoutDto[]> {
        let url_ = this.baseUrl + "/api/Workout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WorkoutDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WorkoutDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<WorkoutDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WorkoutDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: WorkoutDto): Observable<WorkoutDto> {
        let url_ = this.baseUrl + "/api/Workout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WorkoutDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WorkoutDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<WorkoutDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkoutDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: WorkoutDto): Observable<WorkoutDto> {
        let url_ = this.baseUrl + "/api/Workout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WorkoutDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WorkoutDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<WorkoutDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkoutDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<WorkoutDto> {
        let url_ = this.baseUrl + "/api/Workout/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WorkoutDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WorkoutDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WorkoutDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkoutDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<WorkoutDto> {
        let url_ = this.baseUrl + "/api/Workout/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WorkoutDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WorkoutDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<WorkoutDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkoutDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IFormClient {
    getAll(): Observable<FormDto[]>;
    print(formId: number): Observable<any>;
}

@Injectable()
export class FormClient extends ClientBase implements IFormClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<FormDto[]> {
        let url_ = this.baseUrl + "/api/Form";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FormDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FormDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<FormDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FormDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    print(formId: number): Observable<any> {
        let url_ = this.baseUrl + "/api/Form/{formId}/print";
        if (formId === undefined || formId === null)
            throw new Error("The parameter 'formId' must be defined.");
        url_ = url_.replace("{formId}", encodeURIComponent("" + formId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPrint(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPrint(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processPrint(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IGoodCatchClient {
    create(dto: GoodCatchDto): Observable<GoodCatchDto>;
    update(dto: GoodCatchDto): Observable<GoodCatchDto>;
    get(id: number): Observable<GoodCatchDto>;
}

@Injectable()
export class GoodCatchClient extends ClientBase implements IGoodCatchClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    create(dto: GoodCatchDto): Observable<GoodCatchDto> {
        let url_ = this.baseUrl + "/api/GoodCatch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GoodCatchDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GoodCatchDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<GoodCatchDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GoodCatchDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: GoodCatchDto): Observable<GoodCatchDto> {
        let url_ = this.baseUrl + "/api/GoodCatch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GoodCatchDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GoodCatchDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<GoodCatchDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GoodCatchDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<GoodCatchDto> {
        let url_ = this.baseUrl + "/api/GoodCatch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GoodCatchDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GoodCatchDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<GoodCatchDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GoodCatchDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IMyWorkoutClient {
    get(id: number): Observable<MyWorkoutDto>;
    getWorkoutLeaders(): Observable<WorkoutLeadersDto[]>;
    getAll(): Observable<MyWorkoutListDto[]>;
    create(dto: MyWorkoutDto): Observable<MyWorkoutDto>;
    update(dto: MyWorkoutDto): Observable<MyWorkoutDto>;
}

@Injectable()
export class MyWorkoutClient extends ClientBase implements IMyWorkoutClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    get(id: number): Observable<MyWorkoutDto> {
        let url_ = this.baseUrl + "/api/MyWorkout/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MyWorkoutDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MyWorkoutDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<MyWorkoutDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyWorkoutDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getWorkoutLeaders(): Observable<WorkoutLeadersDto[]> {
        let url_ = this.baseUrl + "/api/MyWorkout/leaders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWorkoutLeaders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWorkoutLeaders(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WorkoutLeadersDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WorkoutLeadersDto[]>;
        }));
    }

    protected processGetWorkoutLeaders(response: HttpResponseBase): Observable<WorkoutLeadersDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WorkoutLeadersDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAll(): Observable<MyWorkoutListDto[]> {
        let url_ = this.baseUrl + "/api/MyWorkout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MyWorkoutListDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MyWorkoutListDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<MyWorkoutListDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MyWorkoutListDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: MyWorkoutDto): Observable<MyWorkoutDto> {
        let url_ = this.baseUrl + "/api/MyWorkout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MyWorkoutDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MyWorkoutDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<MyWorkoutDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyWorkoutDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: MyWorkoutDto): Observable<MyWorkoutDto> {
        let url_ = this.baseUrl + "/api/MyWorkout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MyWorkoutDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MyWorkoutDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<MyWorkoutDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyWorkoutDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAccountClient {
    login(dto: LoginDto): Observable<AccessTokenDto>;
    activateAccount(dto: EmailDto): Observable<void>;
    forgotPassword(dto: EmailDto): Observable<string>;
    resetPassword(dto: ResetPasswordDto): Observable<string>;
    resendVerification(dto: EmailDto): Observable<string>;
    getRoles(): Observable<string>;
}

@Injectable()
export class AccountClient extends ClientBase implements IAccountClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    login(dto: LoginDto): Observable<AccessTokenDto> {
        let url_ = this.baseUrl + "/api/Account/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccessTokenDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccessTokenDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<AccessTokenDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccessTokenDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    activateAccount(dto: EmailDto): Observable<void> {
        let url_ = this.baseUrl + "/api/Account/activateaccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processActivateAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processActivateAccount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processActivateAccount(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    forgotPassword(dto: EmailDto): Observable<string> {
        let url_ = this.baseUrl + "/api/Account/forgotpassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processForgotPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processForgotPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processForgotPassword(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    resetPassword(dto: ResetPasswordDto): Observable<string> {
        let url_ = this.baseUrl + "/api/Account/resetpassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    resendVerification(dto: EmailDto): Observable<string> {
        let url_ = this.baseUrl + "/api/Account/resendverification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResendVerification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResendVerification(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processResendVerification(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getRoles(): Observable<string> {
        let url_ = this.baseUrl + "/api/Account/roles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processGetRoles(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ILoginClient {
    authenticate(data: AuthenticateRequest): Observable<FileResponse | null>;
    secured(): Observable<FileResponse | null>;
}

@Injectable()
export class LoginClient extends ClientBase implements ILoginClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    authenticate(data: AuthenticateRequest): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Login/authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(data);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    secured(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Login/secured";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSecured(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSecured(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processSecured(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRoleClient {
    getAll(): Observable<RoleDto[]>;
}

@Injectable()
export class RoleClient extends ClientBase implements IRoleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<RoleDto[]> {
        let url_ = this.baseUrl + "/api/Role";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RoleDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RoleDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUserClient {
    getAll(): Observable<UserDto[]>;
    create(dto: UserDto): Observable<UserDto>;
    update(dto: UserDto): Observable<UserDto>;
    get(id: number): Observable<UserDto>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class UserClient extends ClientBase implements IUserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<UserDto[]> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<UserDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(dto: UserDto): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(dto: UserDto): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<UserDto> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUserGuidClient {
    getAll(): Observable<UserGuidDto[]>;
    getPUT(dto: UserGuidDto): Observable<UserGuidDto>;
    getGET(id: number): Observable<UserGuidDto>;
    delete(id: number): Observable<UserGuidDto>;
}

@Injectable()
export class UserGuidClient extends ClientBase implements IUserGuidClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : this.getBaseUrl("https://localhost:44302");
    }

    getAll(): Observable<UserGuidDto[]> {
        let url_ = this.baseUrl + "/api/UserGuid";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserGuidDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserGuidDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<UserGuidDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserGuidDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPUT(dto: UserGuidDto): Observable<UserGuidDto> {
        let url_ = this.baseUrl + "/api/UserGuid";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserGuidDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserGuidDto>;
        }));
    }

    protected processGetPUT(response: HttpResponseBase): Observable<UserGuidDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserGuidDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getGET(id: number): Observable<UserGuidDto> {
        let url_ = this.baseUrl + "/api/UserGuid/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserGuidDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserGuidDto>;
        }));
    }

    protected processGetGET(response: HttpResponseBase): Observable<UserGuidDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserGuidDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<UserGuidDto> {
        let url_ = this.baseUrl + "/api/UserGuid/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserGuidDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserGuidDto>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<UserGuidDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserGuidDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class BaseDto implements IBaseDto {
    changedById!: number;
    changedDate!: Date;
    isDeleted!: boolean;

    constructor(data?: IBaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.changedById = _data["changedById"];
            this.changedDate = _data["changedDate"] ? new Date(_data["changedDate"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): BaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["changedById"] = this.changedById;
        data["changedDate"] = this.changedDate ? this.changedDate.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IBaseDto {
    changedById: number;
    changedDate: Date;
    isDeleted: boolean;
}

export class IncidentAlertDto extends BaseDto implements IIncidentAlertDto {
    incidentAlertId!: number;
    date!: Date;
    time?: string | undefined;
    equipmentIncidentLocation?: string | undefined;
    supervisor?: string | undefined;
    involvedJobTitle?: string | undefined;
    incidentDescription?: string | undefined;
    immediateActionTaken?: string | undefined;
    alertTimeId!: number;
    alertTime?: AlertTimeDto | undefined;
    projectId!: number;
    project?: ProjectDto | undefined;

    constructor(data?: IIncidentAlertDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.incidentAlertId = _data["incidentAlertId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.time = _data["time"];
            this.equipmentIncidentLocation = _data["equipmentIncidentLocation"];
            this.supervisor = _data["supervisor"];
            this.involvedJobTitle = _data["involvedJobTitle"];
            this.incidentDescription = _data["incidentDescription"];
            this.immediateActionTaken = _data["immediateActionTaken"];
            this.alertTimeId = _data["alertTimeId"];
            this.alertTime = _data["alertTime"] ? AlertTimeDto.fromJS(_data["alertTime"]) : <any>undefined;
            this.projectId = _data["projectId"];
            this.project = _data["project"] ? ProjectDto.fromJS(_data["project"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IncidentAlertDto {
        data = typeof data === 'object' ? data : {};
        let result = new IncidentAlertDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["incidentAlertId"] = this.incidentAlertId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["time"] = this.time;
        data["equipmentIncidentLocation"] = this.equipmentIncidentLocation;
        data["supervisor"] = this.supervisor;
        data["involvedJobTitle"] = this.involvedJobTitle;
        data["incidentDescription"] = this.incidentDescription;
        data["immediateActionTaken"] = this.immediateActionTaken;
        data["alertTimeId"] = this.alertTimeId;
        data["alertTime"] = this.alertTime ? this.alertTime.toJSON() : <any>undefined;
        data["projectId"] = this.projectId;
        data["project"] = this.project ? this.project.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IIncidentAlertDto extends IBaseDto {
    incidentAlertId: number;
    date: Date;
    time?: string | undefined;
    equipmentIncidentLocation?: string | undefined;
    supervisor?: string | undefined;
    involvedJobTitle?: string | undefined;
    incidentDescription?: string | undefined;
    immediateActionTaken?: string | undefined;
    alertTimeId: number;
    alertTime?: AlertTimeDto | undefined;
    projectId: number;
    project?: ProjectDto | undefined;
}

export class AlertTimeDto implements IAlertTimeDto {
    alertTimeId!: number;
    name?: string | undefined;

    constructor(data?: IAlertTimeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.alertTimeId = _data["alertTimeId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AlertTimeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AlertTimeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alertTimeId"] = this.alertTimeId;
        data["name"] = this.name;
        return data;
    }
}

export interface IAlertTimeDto {
    alertTimeId: number;
    name?: string | undefined;
}

export class ProjectDto extends BaseDto implements IProjectDto {
    projectId!: number;
    name?: string | undefined;

    constructor(data?: IProjectDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.projectId = _data["projectId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProjectDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["projectId"] = this.projectId;
        data["name"] = this.name;
        super.toJSON(data);
        return data;
    }
}

export interface IProjectDto extends IBaseDto {
    projectId: number;
    name?: string | undefined;
}

export class JsaDto extends BaseDto implements IJsaDto {
    jsaId!: number;
    jsaNo?: string | undefined;
    rev?: string | undefined;
    reference?: string | undefined;
    jobDescription?: string | undefined;
    page?: string | undefined;
    date!: Date;
    title?: string | undefined;
    supervisor?: string | undefined;
    analysisBy?: string | undefined;
    approvedBy?: string | undefined;
    location?: string | undefined;
    department?: string | undefined;
    dailySafety!: boolean;
    stepActions?: StepActionDto[] | undefined;
    crewAttendances?: CrewAttendanceDto[] | undefined;

    constructor(data?: IJsaDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.jsaId = _data["jsaId"];
            this.jsaNo = _data["jsaNo"];
            this.rev = _data["rev"];
            this.reference = _data["reference"];
            this.jobDescription = _data["jobDescription"];
            this.page = _data["page"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.title = _data["title"];
            this.supervisor = _data["supervisor"];
            this.analysisBy = _data["analysisBy"];
            this.approvedBy = _data["approvedBy"];
            this.location = _data["location"];
            this.department = _data["department"];
            this.dailySafety = _data["dailySafety"];
            if (Array.isArray(_data["stepActions"])) {
                this.stepActions = [] as any;
                for (let item of _data["stepActions"])
                    this.stepActions!.push(StepActionDto.fromJS(item));
            }
            if (Array.isArray(_data["crewAttendances"])) {
                this.crewAttendances = [] as any;
                for (let item of _data["crewAttendances"])
                    this.crewAttendances!.push(CrewAttendanceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JsaDto {
        data = typeof data === 'object' ? data : {};
        let result = new JsaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jsaId"] = this.jsaId;
        data["jsaNo"] = this.jsaNo;
        data["rev"] = this.rev;
        data["reference"] = this.reference;
        data["jobDescription"] = this.jobDescription;
        data["page"] = this.page;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["supervisor"] = this.supervisor;
        data["analysisBy"] = this.analysisBy;
        data["approvedBy"] = this.approvedBy;
        data["location"] = this.location;
        data["department"] = this.department;
        data["dailySafety"] = this.dailySafety;
        if (Array.isArray(this.stepActions)) {
            data["stepActions"] = [];
            for (let item of this.stepActions)
                data["stepActions"].push(item.toJSON());
        }
        if (Array.isArray(this.crewAttendances)) {
            data["crewAttendances"] = [];
            for (let item of this.crewAttendances)
                data["crewAttendances"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IJsaDto extends IBaseDto {
    jsaId: number;
    jsaNo?: string | undefined;
    rev?: string | undefined;
    reference?: string | undefined;
    jobDescription?: string | undefined;
    page?: string | undefined;
    date: Date;
    title?: string | undefined;
    supervisor?: string | undefined;
    analysisBy?: string | undefined;
    approvedBy?: string | undefined;
    location?: string | undefined;
    department?: string | undefined;
    dailySafety: boolean;
    stepActions?: StepActionDto[] | undefined;
    crewAttendances?: CrewAttendanceDto[] | undefined;
}

export class StepActionDto extends BaseDto implements IStepActionDto {
    stepActionId!: number;
    stepSequnce?: string | undefined;
    hazards?: string | undefined;
    actions?: string | undefined;

    constructor(data?: IStepActionDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.stepActionId = _data["stepActionId"];
            this.stepSequnce = _data["stepSequnce"];
            this.hazards = _data["hazards"];
            this.actions = _data["actions"];
        }
    }

    static fromJS(data: any): StepActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new StepActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stepActionId"] = this.stepActionId;
        data["stepSequnce"] = this.stepSequnce;
        data["hazards"] = this.hazards;
        data["actions"] = this.actions;
        super.toJSON(data);
        return data;
    }
}

export interface IStepActionDto extends IBaseDto {
    stepActionId: number;
    stepSequnce?: string | undefined;
    hazards?: string | undefined;
    actions?: string | undefined;
}

export class CrewAttendanceDto extends BaseDto implements ICrewAttendanceDto {
    crewAttendanceId!: number;
    printName?: string | undefined;
    signName?: string | undefined;
    signIn?: string | undefined;
    signOut?: string | undefined;

    constructor(data?: ICrewAttendanceDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.crewAttendanceId = _data["crewAttendanceId"];
            this.printName = _data["printName"];
            this.signName = _data["signName"];
            this.signIn = _data["signIn"];
            this.signOut = _data["signOut"];
        }
    }

    static fromJS(data: any): CrewAttendanceDto {
        data = typeof data === 'object' ? data : {};
        let result = new CrewAttendanceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["crewAttendanceId"] = this.crewAttendanceId;
        data["printName"] = this.printName;
        data["signName"] = this.signName;
        data["signIn"] = this.signIn;
        data["signOut"] = this.signOut;
        super.toJSON(data);
        return data;
    }
}

export interface ICrewAttendanceDto extends IBaseDto {
    crewAttendanceId: number;
    printName?: string | undefined;
    signName?: string | undefined;
    signIn?: string | undefined;
    signOut?: string | undefined;
}

export class MotorizedEquipmentDto extends BaseDto implements IMotorizedEquipmentDto {
    motorizedEquipmentId!: number;
    model?: string | undefined;
    hourMeter?: string | undefined;
    inspectedBy?: string | undefined;
    date!: Date;
    operationalInspection?: MotorizedEquipmentOperationalInspectionDto | undefined;
    damageInspection?: MotorizedEquipmentDamageInspectionDto | undefined;

    constructor(data?: IMotorizedEquipmentDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.motorizedEquipmentId = _data["motorizedEquipmentId"];
            this.model = _data["model"];
            this.hourMeter = _data["hourMeter"];
            this.inspectedBy = _data["inspectedBy"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.operationalInspection = _data["operationalInspection"] ? MotorizedEquipmentOperationalInspectionDto.fromJS(_data["operationalInspection"]) : <any>undefined;
            this.damageInspection = _data["damageInspection"] ? MotorizedEquipmentDamageInspectionDto.fromJS(_data["damageInspection"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MotorizedEquipmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new MotorizedEquipmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["motorizedEquipmentId"] = this.motorizedEquipmentId;
        data["model"] = this.model;
        data["hourMeter"] = this.hourMeter;
        data["inspectedBy"] = this.inspectedBy;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["operationalInspection"] = this.operationalInspection ? this.operationalInspection.toJSON() : <any>undefined;
        data["damageInspection"] = this.damageInspection ? this.damageInspection.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IMotorizedEquipmentDto extends IBaseDto {
    motorizedEquipmentId: number;
    model?: string | undefined;
    hourMeter?: string | undefined;
    inspectedBy?: string | undefined;
    date: Date;
    operationalInspection?: MotorizedEquipmentOperationalInspectionDto | undefined;
    damageInspection?: MotorizedEquipmentDamageInspectionDto | undefined;
}

export class MotorizedEquipmentOperationalInspectionDto implements IMotorizedEquipmentOperationalInspectionDto {
    motorizedEquipmentOperationalInspectionId!: number;
    headlights?: OperationalDto | undefined;
    reverseLights?: OperationalDto | undefined;
    runningLights?: OperationalDto | undefined;
    parkingBrake?: OperationalDto | undefined;
    batteryGauge?: OperationalDto | undefined;
    waterLevelGauge?: OperationalDto | undefined;
    temperatureGauge?: OperationalDto | undefined;
    oilLevelGauge?: OperationalDto | undefined;
    fuelLevelGauge?: OperationalDto | undefined;
    horn?: OperationalDto | undefined;
    reverseSignal?: OperationalDto | undefined;
    brakes?: OperationalDto | undefined;
    seatBelt?: OperationalDto | undefined;
    chains?: OperationalDto | undefined;
    hydraulicOutriggers?: OperationalDto | undefined;
    hydraulicTilt?: OperationalDto | undefined;
    hydraulicSideShift?: OperationalDto | undefined;
    engineOilLevel?: OperationalDto | undefined;
    hydraulicOilLevel?: OperationalDto | undefined;
    steeringControls?: OperationalDto | undefined;

    constructor(data?: IMotorizedEquipmentOperationalInspectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.motorizedEquipmentOperationalInspectionId = _data["motorizedEquipmentOperationalInspectionId"];
            this.headlights = _data["headlights"] ? OperationalDto.fromJS(_data["headlights"]) : <any>undefined;
            this.reverseLights = _data["reverseLights"] ? OperationalDto.fromJS(_data["reverseLights"]) : <any>undefined;
            this.runningLights = _data["runningLights"] ? OperationalDto.fromJS(_data["runningLights"]) : <any>undefined;
            this.parkingBrake = _data["parkingBrake"] ? OperationalDto.fromJS(_data["parkingBrake"]) : <any>undefined;
            this.batteryGauge = _data["batteryGauge"] ? OperationalDto.fromJS(_data["batteryGauge"]) : <any>undefined;
            this.waterLevelGauge = _data["waterLevelGauge"] ? OperationalDto.fromJS(_data["waterLevelGauge"]) : <any>undefined;
            this.temperatureGauge = _data["temperatureGauge"] ? OperationalDto.fromJS(_data["temperatureGauge"]) : <any>undefined;
            this.oilLevelGauge = _data["oilLevelGauge"] ? OperationalDto.fromJS(_data["oilLevelGauge"]) : <any>undefined;
            this.fuelLevelGauge = _data["fuelLevelGauge"] ? OperationalDto.fromJS(_data["fuelLevelGauge"]) : <any>undefined;
            this.horn = _data["horn"] ? OperationalDto.fromJS(_data["horn"]) : <any>undefined;
            this.reverseSignal = _data["reverseSignal"] ? OperationalDto.fromJS(_data["reverseSignal"]) : <any>undefined;
            this.brakes = _data["brakes"] ? OperationalDto.fromJS(_data["brakes"]) : <any>undefined;
            this.seatBelt = _data["seatBelt"] ? OperationalDto.fromJS(_data["seatBelt"]) : <any>undefined;
            this.chains = _data["chains"] ? OperationalDto.fromJS(_data["chains"]) : <any>undefined;
            this.hydraulicOutriggers = _data["hydraulicOutriggers"] ? OperationalDto.fromJS(_data["hydraulicOutriggers"]) : <any>undefined;
            this.hydraulicTilt = _data["hydraulicTilt"] ? OperationalDto.fromJS(_data["hydraulicTilt"]) : <any>undefined;
            this.hydraulicSideShift = _data["hydraulicSideShift"] ? OperationalDto.fromJS(_data["hydraulicSideShift"]) : <any>undefined;
            this.engineOilLevel = _data["engineOilLevel"] ? OperationalDto.fromJS(_data["engineOilLevel"]) : <any>undefined;
            this.hydraulicOilLevel = _data["hydraulicOilLevel"] ? OperationalDto.fromJS(_data["hydraulicOilLevel"]) : <any>undefined;
            this.steeringControls = _data["steeringControls"] ? OperationalDto.fromJS(_data["steeringControls"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MotorizedEquipmentOperationalInspectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new MotorizedEquipmentOperationalInspectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["motorizedEquipmentOperationalInspectionId"] = this.motorizedEquipmentOperationalInspectionId;
        data["headlights"] = this.headlights ? this.headlights.toJSON() : <any>undefined;
        data["reverseLights"] = this.reverseLights ? this.reverseLights.toJSON() : <any>undefined;
        data["runningLights"] = this.runningLights ? this.runningLights.toJSON() : <any>undefined;
        data["parkingBrake"] = this.parkingBrake ? this.parkingBrake.toJSON() : <any>undefined;
        data["batteryGauge"] = this.batteryGauge ? this.batteryGauge.toJSON() : <any>undefined;
        data["waterLevelGauge"] = this.waterLevelGauge ? this.waterLevelGauge.toJSON() : <any>undefined;
        data["temperatureGauge"] = this.temperatureGauge ? this.temperatureGauge.toJSON() : <any>undefined;
        data["oilLevelGauge"] = this.oilLevelGauge ? this.oilLevelGauge.toJSON() : <any>undefined;
        data["fuelLevelGauge"] = this.fuelLevelGauge ? this.fuelLevelGauge.toJSON() : <any>undefined;
        data["horn"] = this.horn ? this.horn.toJSON() : <any>undefined;
        data["reverseSignal"] = this.reverseSignal ? this.reverseSignal.toJSON() : <any>undefined;
        data["brakes"] = this.brakes ? this.brakes.toJSON() : <any>undefined;
        data["seatBelt"] = this.seatBelt ? this.seatBelt.toJSON() : <any>undefined;
        data["chains"] = this.chains ? this.chains.toJSON() : <any>undefined;
        data["hydraulicOutriggers"] = this.hydraulicOutriggers ? this.hydraulicOutriggers.toJSON() : <any>undefined;
        data["hydraulicTilt"] = this.hydraulicTilt ? this.hydraulicTilt.toJSON() : <any>undefined;
        data["hydraulicSideShift"] = this.hydraulicSideShift ? this.hydraulicSideShift.toJSON() : <any>undefined;
        data["engineOilLevel"] = this.engineOilLevel ? this.engineOilLevel.toJSON() : <any>undefined;
        data["hydraulicOilLevel"] = this.hydraulicOilLevel ? this.hydraulicOilLevel.toJSON() : <any>undefined;
        data["steeringControls"] = this.steeringControls ? this.steeringControls.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMotorizedEquipmentOperationalInspectionDto {
    motorizedEquipmentOperationalInspectionId: number;
    headlights?: OperationalDto | undefined;
    reverseLights?: OperationalDto | undefined;
    runningLights?: OperationalDto | undefined;
    parkingBrake?: OperationalDto | undefined;
    batteryGauge?: OperationalDto | undefined;
    waterLevelGauge?: OperationalDto | undefined;
    temperatureGauge?: OperationalDto | undefined;
    oilLevelGauge?: OperationalDto | undefined;
    fuelLevelGauge?: OperationalDto | undefined;
    horn?: OperationalDto | undefined;
    reverseSignal?: OperationalDto | undefined;
    brakes?: OperationalDto | undefined;
    seatBelt?: OperationalDto | undefined;
    chains?: OperationalDto | undefined;
    hydraulicOutriggers?: OperationalDto | undefined;
    hydraulicTilt?: OperationalDto | undefined;
    hydraulicSideShift?: OperationalDto | undefined;
    engineOilLevel?: OperationalDto | undefined;
    hydraulicOilLevel?: OperationalDto | undefined;
    steeringControls?: OperationalDto | undefined;
}

export class OperationalDto extends BaseDto implements IOperationalDto {
    operationalId!: number;
    name?: string | undefined;
    yesNoNa?: string | undefined;
    description?: string | undefined;

    constructor(data?: IOperationalDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.operationalId = _data["operationalId"];
            this.name = _data["name"];
            this.yesNoNa = _data["yesNoNa"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): OperationalDto {
        data = typeof data === 'object' ? data : {};
        let result = new OperationalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["operationalId"] = this.operationalId;
        data["name"] = this.name;
        data["yesNoNa"] = this.yesNoNa;
        data["description"] = this.description;
        super.toJSON(data);
        return data;
    }
}

export interface IOperationalDto extends IBaseDto {
    operationalId: number;
    name?: string | undefined;
    yesNoNa?: string | undefined;
    description?: string | undefined;
}

export class MotorizedEquipmentDamageInspectionDto implements IMotorizedEquipmentDamageInspectionDto {
    motorizedEquipmentDamageInspectionId!: number;
    leaksDetected?: OperationalDto | undefined;
    tiresAndWheels?: OperationalDto | undefined;
    forks?: OperationalDto | undefined;
    attachments?: OperationalDto | undefined;
    batteryConnectors?: OperationalDto | undefined;
    guards?: OperationalDto | undefined;
    safetyDevices?: OperationalDto | undefined;
    propaneTankLines?: OperationalDto | undefined;

    constructor(data?: IMotorizedEquipmentDamageInspectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.motorizedEquipmentDamageInspectionId = _data["motorizedEquipmentDamageInspectionId"];
            this.leaksDetected = _data["leaksDetected"] ? OperationalDto.fromJS(_data["leaksDetected"]) : <any>undefined;
            this.tiresAndWheels = _data["tiresAndWheels"] ? OperationalDto.fromJS(_data["tiresAndWheels"]) : <any>undefined;
            this.forks = _data["forks"] ? OperationalDto.fromJS(_data["forks"]) : <any>undefined;
            this.attachments = _data["attachments"] ? OperationalDto.fromJS(_data["attachments"]) : <any>undefined;
            this.batteryConnectors = _data["batteryConnectors"] ? OperationalDto.fromJS(_data["batteryConnectors"]) : <any>undefined;
            this.guards = _data["guards"] ? OperationalDto.fromJS(_data["guards"]) : <any>undefined;
            this.safetyDevices = _data["safetyDevices"] ? OperationalDto.fromJS(_data["safetyDevices"]) : <any>undefined;
            this.propaneTankLines = _data["propaneTankLines"] ? OperationalDto.fromJS(_data["propaneTankLines"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MotorizedEquipmentDamageInspectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new MotorizedEquipmentDamageInspectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["motorizedEquipmentDamageInspectionId"] = this.motorizedEquipmentDamageInspectionId;
        data["leaksDetected"] = this.leaksDetected ? this.leaksDetected.toJSON() : <any>undefined;
        data["tiresAndWheels"] = this.tiresAndWheels ? this.tiresAndWheels.toJSON() : <any>undefined;
        data["forks"] = this.forks ? this.forks.toJSON() : <any>undefined;
        data["attachments"] = this.attachments ? this.attachments.toJSON() : <any>undefined;
        data["batteryConnectors"] = this.batteryConnectors ? this.batteryConnectors.toJSON() : <any>undefined;
        data["guards"] = this.guards ? this.guards.toJSON() : <any>undefined;
        data["safetyDevices"] = this.safetyDevices ? this.safetyDevices.toJSON() : <any>undefined;
        data["propaneTankLines"] = this.propaneTankLines ? this.propaneTankLines.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMotorizedEquipmentDamageInspectionDto {
    motorizedEquipmentDamageInspectionId: number;
    leaksDetected?: OperationalDto | undefined;
    tiresAndWheels?: OperationalDto | undefined;
    forks?: OperationalDto | undefined;
    attachments?: OperationalDto | undefined;
    batteryConnectors?: OperationalDto | undefined;
    guards?: OperationalDto | undefined;
    safetyDevices?: OperationalDto | undefined;
    propaneTankLines?: OperationalDto | undefined;
}

export class NearMissDto extends BaseDto implements INearMissDto {
    nearMissId!: number;
    date!: Date;
    time?: string | undefined;
    affectedJobsiteLocation?: string | undefined;
    supervisor?: string | undefined;
    reporingPerson?: string | undefined;
    nearMissDescription?: string | undefined;
    immediateAction?: string | undefined;
    correctiveAction?: string | undefined;
    ssho?: string | undefined;
    manager?: string | undefined;
    divisionId!: number;
    division?: DivisionDto | undefined;
    departmentId!: number;
    department?: DepartmentDto | undefined;
    projectId!: number;
    project?: ProjectDto | undefined;
    nearMissTypeId!: number;
    nearMissType?: NearMissTypeDto | undefined;
    controlMethodId!: number;
    controlMethod?: ControlMethodDto | undefined;
    wrongselectionofPPE?: boolean | undefined;
    disregardSafetyRules?: boolean | undefined;
    employeefatigue?: boolean | undefined;
    failuretofollowprocedure?: boolean | undefined;
    takingshortcuts?: boolean | undefined;
    lackofattention?: boolean | undefined;
    workingtofast?: boolean | undefined;
    lackofemployeetraining?: boolean | undefined;
    improperLiftingtechnique?: boolean | undefined;
    newtaskforemployeeorlackofexperience?: boolean | undefined;
    failuretosecureorwarn?: boolean | undefined;
    nooroutdatedprocedure?: boolean | undefined;
    operatingwithoutauthority?: boolean | undefined;
    hazardousmethodorprocedure?: boolean | undefined;
    poorpositioning?: boolean | undefined;
    unsafeposture?: boolean | undefined;
    travelingpublicenteringworkarea?: boolean | undefined;
    incompleteoroutdatedJSA?: boolean | undefined;
    improperLOTO?: boolean | undefined;
    poororhousekeepingpractices?: boolean | undefined;
    guardremovedornotinstalledonequipment?: boolean | undefined;
    equipmentfailure?: boolean | undefined;
    impropermaterialorequipmentused?: boolean | undefined;
    weather?: boolean | undefined;
    other?: boolean | undefined;

    constructor(data?: INearMissDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.nearMissId = _data["nearMissId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.time = _data["time"];
            this.affectedJobsiteLocation = _data["affectedJobsiteLocation"];
            this.supervisor = _data["supervisor"];
            this.reporingPerson = _data["reporingPerson"];
            this.nearMissDescription = _data["nearMissDescription"];
            this.immediateAction = _data["immediateAction"];
            this.correctiveAction = _data["correctiveAction"];
            this.ssho = _data["ssho"];
            this.manager = _data["manager"];
            this.divisionId = _data["divisionId"];
            this.division = _data["division"] ? DivisionDto.fromJS(_data["division"]) : <any>undefined;
            this.departmentId = _data["departmentId"];
            this.department = _data["department"] ? DepartmentDto.fromJS(_data["department"]) : <any>undefined;
            this.projectId = _data["projectId"];
            this.project = _data["project"] ? ProjectDto.fromJS(_data["project"]) : <any>undefined;
            this.nearMissTypeId = _data["nearMissTypeId"];
            this.nearMissType = _data["nearMissType"] ? NearMissTypeDto.fromJS(_data["nearMissType"]) : <any>undefined;
            this.controlMethodId = _data["controlMethodId"];
            this.controlMethod = _data["controlMethod"] ? ControlMethodDto.fromJS(_data["controlMethod"]) : <any>undefined;
            this.wrongselectionofPPE = _data["wrongselectionofPPE"];
            this.disregardSafetyRules = _data["disregardSafetyRules"];
            this.employeefatigue = _data["employeefatigue"];
            this.failuretofollowprocedure = _data["failuretofollowprocedure"];
            this.takingshortcuts = _data["takingshortcuts"];
            this.lackofattention = _data["lackofattention"];
            this.workingtofast = _data["workingtofast"];
            this.lackofemployeetraining = _data["lackofemployeetraining"];
            this.improperLiftingtechnique = _data["improperLiftingtechnique"];
            this.newtaskforemployeeorlackofexperience = _data["newtaskforemployeeorlackofexperience"];
            this.failuretosecureorwarn = _data["failuretosecureorwarn"];
            this.nooroutdatedprocedure = _data["nooroutdatedprocedure"];
            this.operatingwithoutauthority = _data["operatingwithoutauthority"];
            this.hazardousmethodorprocedure = _data["hazardousmethodorprocedure"];
            this.poorpositioning = _data["poorpositioning"];
            this.unsafeposture = _data["unsafeposture"];
            this.travelingpublicenteringworkarea = _data["travelingpublicenteringworkarea"];
            this.incompleteoroutdatedJSA = _data["incompleteoroutdatedJSA"];
            this.improperLOTO = _data["improperLOTO"];
            this.poororhousekeepingpractices = _data["poororhousekeepingpractices"];
            this.guardremovedornotinstalledonequipment = _data["guardremovedornotinstalledonequipment"];
            this.equipmentfailure = _data["equipmentfailure"];
            this.impropermaterialorequipmentused = _data["impropermaterialorequipmentused"];
            this.weather = _data["weather"];
            this.other = _data["other"];
        }
    }

    static fromJS(data: any): NearMissDto {
        data = typeof data === 'object' ? data : {};
        let result = new NearMissDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nearMissId"] = this.nearMissId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["time"] = this.time;
        data["affectedJobsiteLocation"] = this.affectedJobsiteLocation;
        data["supervisor"] = this.supervisor;
        data["reporingPerson"] = this.reporingPerson;
        data["nearMissDescription"] = this.nearMissDescription;
        data["immediateAction"] = this.immediateAction;
        data["correctiveAction"] = this.correctiveAction;
        data["ssho"] = this.ssho;
        data["manager"] = this.manager;
        data["divisionId"] = this.divisionId;
        data["division"] = this.division ? this.division.toJSON() : <any>undefined;
        data["departmentId"] = this.departmentId;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        data["projectId"] = this.projectId;
        data["project"] = this.project ? this.project.toJSON() : <any>undefined;
        data["nearMissTypeId"] = this.nearMissTypeId;
        data["nearMissType"] = this.nearMissType ? this.nearMissType.toJSON() : <any>undefined;
        data["controlMethodId"] = this.controlMethodId;
        data["controlMethod"] = this.controlMethod ? this.controlMethod.toJSON() : <any>undefined;
        data["wrongselectionofPPE"] = this.wrongselectionofPPE;
        data["disregardSafetyRules"] = this.disregardSafetyRules;
        data["employeefatigue"] = this.employeefatigue;
        data["failuretofollowprocedure"] = this.failuretofollowprocedure;
        data["takingshortcuts"] = this.takingshortcuts;
        data["lackofattention"] = this.lackofattention;
        data["workingtofast"] = this.workingtofast;
        data["lackofemployeetraining"] = this.lackofemployeetraining;
        data["improperLiftingtechnique"] = this.improperLiftingtechnique;
        data["newtaskforemployeeorlackofexperience"] = this.newtaskforemployeeorlackofexperience;
        data["failuretosecureorwarn"] = this.failuretosecureorwarn;
        data["nooroutdatedprocedure"] = this.nooroutdatedprocedure;
        data["operatingwithoutauthority"] = this.operatingwithoutauthority;
        data["hazardousmethodorprocedure"] = this.hazardousmethodorprocedure;
        data["poorpositioning"] = this.poorpositioning;
        data["unsafeposture"] = this.unsafeposture;
        data["travelingpublicenteringworkarea"] = this.travelingpublicenteringworkarea;
        data["incompleteoroutdatedJSA"] = this.incompleteoroutdatedJSA;
        data["improperLOTO"] = this.improperLOTO;
        data["poororhousekeepingpractices"] = this.poororhousekeepingpractices;
        data["guardremovedornotinstalledonequipment"] = this.guardremovedornotinstalledonequipment;
        data["equipmentfailure"] = this.equipmentfailure;
        data["impropermaterialorequipmentused"] = this.impropermaterialorequipmentused;
        data["weather"] = this.weather;
        data["other"] = this.other;
        super.toJSON(data);
        return data;
    }
}

export interface INearMissDto extends IBaseDto {
    nearMissId: number;
    date: Date;
    time?: string | undefined;
    affectedJobsiteLocation?: string | undefined;
    supervisor?: string | undefined;
    reporingPerson?: string | undefined;
    nearMissDescription?: string | undefined;
    immediateAction?: string | undefined;
    correctiveAction?: string | undefined;
    ssho?: string | undefined;
    manager?: string | undefined;
    divisionId: number;
    division?: DivisionDto | undefined;
    departmentId: number;
    department?: DepartmentDto | undefined;
    projectId: number;
    project?: ProjectDto | undefined;
    nearMissTypeId: number;
    nearMissType?: NearMissTypeDto | undefined;
    controlMethodId: number;
    controlMethod?: ControlMethodDto | undefined;
    wrongselectionofPPE?: boolean | undefined;
    disregardSafetyRules?: boolean | undefined;
    employeefatigue?: boolean | undefined;
    failuretofollowprocedure?: boolean | undefined;
    takingshortcuts?: boolean | undefined;
    lackofattention?: boolean | undefined;
    workingtofast?: boolean | undefined;
    lackofemployeetraining?: boolean | undefined;
    improperLiftingtechnique?: boolean | undefined;
    newtaskforemployeeorlackofexperience?: boolean | undefined;
    failuretosecureorwarn?: boolean | undefined;
    nooroutdatedprocedure?: boolean | undefined;
    operatingwithoutauthority?: boolean | undefined;
    hazardousmethodorprocedure?: boolean | undefined;
    poorpositioning?: boolean | undefined;
    unsafeposture?: boolean | undefined;
    travelingpublicenteringworkarea?: boolean | undefined;
    incompleteoroutdatedJSA?: boolean | undefined;
    improperLOTO?: boolean | undefined;
    poororhousekeepingpractices?: boolean | undefined;
    guardremovedornotinstalledonequipment?: boolean | undefined;
    equipmentfailure?: boolean | undefined;
    impropermaterialorequipmentused?: boolean | undefined;
    weather?: boolean | undefined;
    other?: boolean | undefined;
}

export class DivisionDto extends BaseDto implements IDivisionDto {
    divisionId!: number;
    name?: string | undefined;

    constructor(data?: IDivisionDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.divisionId = _data["divisionId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): DivisionDto {
        data = typeof data === 'object' ? data : {};
        let result = new DivisionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["divisionId"] = this.divisionId;
        data["name"] = this.name;
        super.toJSON(data);
        return data;
    }
}

export interface IDivisionDto extends IBaseDto {
    divisionId: number;
    name?: string | undefined;
}

export class DepartmentDto extends BaseDto implements IDepartmentDto {
    departmentId!: number;
    name?: string | undefined;

    constructor(data?: IDepartmentDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.departmentId = _data["departmentId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): DepartmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepartmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentId"] = this.departmentId;
        data["name"] = this.name;
        super.toJSON(data);
        return data;
    }
}

export interface IDepartmentDto extends IBaseDto {
    departmentId: number;
    name?: string | undefined;
}

export class NearMissTypeDto extends BaseDto implements INearMissTypeDto {
    nearMissTypeId!: number;
    missType?: string | undefined;

    constructor(data?: INearMissTypeDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.nearMissTypeId = _data["nearMissTypeId"];
            this.missType = _data["missType"];
        }
    }

    static fromJS(data: any): NearMissTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new NearMissTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nearMissTypeId"] = this.nearMissTypeId;
        data["missType"] = this.missType;
        super.toJSON(data);
        return data;
    }
}

export interface INearMissTypeDto extends IBaseDto {
    nearMissTypeId: number;
    missType?: string | undefined;
}

export class ControlMethodDto extends BaseDto implements IControlMethodDto {
    controlMethodId!: number;
    method?: string | undefined;

    constructor(data?: IControlMethodDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.controlMethodId = _data["controlMethodId"];
            this.method = _data["method"];
        }
    }

    static fromJS(data: any): ControlMethodDto {
        data = typeof data === 'object' ? data : {};
        let result = new ControlMethodDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["controlMethodId"] = this.controlMethodId;
        data["method"] = this.method;
        super.toJSON(data);
        return data;
    }
}

export interface IControlMethodDto extends IBaseDto {
    controlMethodId: number;
    method?: string | undefined;
}

export class SiteSafetyOrientationDto extends BaseDto implements ISiteSafetyOrientationDto {
    siteSafetyOrientationId!: number;
    name?: string | undefined;
    date!: Date;
    projectId!: number;
    project?: ProjectDto | undefined;
    generalHealth?: boolean | undefined;
    houseKeeping?: boolean | undefined;
    powerTools?: boolean | undefined;
    firePrevention?: boolean | undefined;
    welding?: boolean | undefined;
    compressedAir?: boolean | undefined;
    electricalSafety?: boolean | undefined;
    aerialLifts?: boolean | undefined;
    scaffolding?: boolean | undefined;
    trenching?: boolean | undefined;
    fallProtection?: boolean | undefined;
    fleetSafety?: boolean | undefined;
    craneSafety?: boolean | undefined;
    firstAid?: boolean | undefined;
    pathogens?: boolean | undefined;
    lead?: boolean | undefined;
    confinedSpaces?: boolean | undefined;
    lockout?: boolean | undefined;
    forkTrucks?: boolean | undefined;
    protectiveEquipment?: boolean | undefined;
    hearingProtection?: boolean | undefined;
    designateFacilities?: boolean | undefined;
    coverage?: boolean | undefined;
    contactInformation?: boolean | undefined;
    whatRequires?: boolean | undefined;
    whenToReport?: boolean | undefined;
    whoToNotify?: boolean | undefined;
    testingProcedures?: boolean | undefined;
    reportingOfMedication?: boolean | undefined;
    eap?: boolean | undefined;
    progressivePolicy?: boolean | undefined;
    obtainInformation?: boolean | undefined;
    sds?: boolean | undefined;
    hazardCommunication?: boolean | undefined;
    labelingSystems?: boolean | undefined;
    protectiveMeasures?: boolean | undefined;
    alarmSystems?: boolean | undefined;
    shelterAreas?: boolean | undefined;
    musteringZones?: boolean | undefined;
    accountingProcedures?: boolean | undefined;
    hardHats?: boolean | undefined;
    safetyVests?: boolean | undefined;
    handProtection?: boolean | undefined;
    footProtection?: boolean | undefined;
    faceProtection?: boolean | undefined;
    hearingProtection2?: boolean | undefined;
    protectiveClothing?: boolean | undefined;
    personalFallArrest?: boolean | undefined;
    stepLadders?: boolean | undefined;
    extensionLadders?: boolean | undefined;
    capacities?: boolean | undefined;
    properUse?: boolean | undefined;

    constructor(data?: ISiteSafetyOrientationDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.siteSafetyOrientationId = _data["siteSafetyOrientationId"];
            this.name = _data["name"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.projectId = _data["projectId"];
            this.project = _data["project"] ? ProjectDto.fromJS(_data["project"]) : <any>undefined;
            this.generalHealth = _data["generalHealth"];
            this.houseKeeping = _data["houseKeeping"];
            this.powerTools = _data["powerTools"];
            this.firePrevention = _data["firePrevention"];
            this.welding = _data["welding"];
            this.compressedAir = _data["compressedAir"];
            this.electricalSafety = _data["electricalSafety"];
            this.aerialLifts = _data["aerialLifts"];
            this.scaffolding = _data["scaffolding"];
            this.trenching = _data["trenching"];
            this.fallProtection = _data["fallProtection"];
            this.fleetSafety = _data["fleetSafety"];
            this.craneSafety = _data["craneSafety"];
            this.firstAid = _data["firstAid"];
            this.pathogens = _data["pathogens"];
            this.lead = _data["lead"];
            this.confinedSpaces = _data["confinedSpaces"];
            this.lockout = _data["lockout"];
            this.forkTrucks = _data["forkTrucks"];
            this.protectiveEquipment = _data["protectiveEquipment"];
            this.hearingProtection = _data["hearingProtection"];
            this.designateFacilities = _data["designateFacilities"];
            this.coverage = _data["coverage"];
            this.contactInformation = _data["contactInformation"];
            this.whatRequires = _data["whatRequires"];
            this.whenToReport = _data["whenToReport"];
            this.whoToNotify = _data["whoToNotify"];
            this.testingProcedures = _data["testingProcedures"];
            this.reportingOfMedication = _data["reportingOfMedication"];
            this.eap = _data["eap"];
            this.progressivePolicy = _data["progressivePolicy"];
            this.obtainInformation = _data["obtainInformation"];
            this.sds = _data["sds"];
            this.hazardCommunication = _data["hazardCommunication"];
            this.labelingSystems = _data["labelingSystems"];
            this.protectiveMeasures = _data["protectiveMeasures"];
            this.alarmSystems = _data["alarmSystems"];
            this.shelterAreas = _data["shelterAreas"];
            this.musteringZones = _data["musteringZones"];
            this.accountingProcedures = _data["accountingProcedures"];
            this.hardHats = _data["hardHats"];
            this.safetyVests = _data["safetyVests"];
            this.handProtection = _data["handProtection"];
            this.footProtection = _data["footProtection"];
            this.faceProtection = _data["faceProtection"];
            this.hearingProtection2 = _data["hearingProtection2"];
            this.protectiveClothing = _data["protectiveClothing"];
            this.personalFallArrest = _data["personalFallArrest"];
            this.stepLadders = _data["stepLadders"];
            this.extensionLadders = _data["extensionLadders"];
            this.capacities = _data["capacities"];
            this.properUse = _data["properUse"];
        }
    }

    static fromJS(data: any): SiteSafetyOrientationDto {
        data = typeof data === 'object' ? data : {};
        let result = new SiteSafetyOrientationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteSafetyOrientationId"] = this.siteSafetyOrientationId;
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["projectId"] = this.projectId;
        data["project"] = this.project ? this.project.toJSON() : <any>undefined;
        data["generalHealth"] = this.generalHealth;
        data["houseKeeping"] = this.houseKeeping;
        data["powerTools"] = this.powerTools;
        data["firePrevention"] = this.firePrevention;
        data["welding"] = this.welding;
        data["compressedAir"] = this.compressedAir;
        data["electricalSafety"] = this.electricalSafety;
        data["aerialLifts"] = this.aerialLifts;
        data["scaffolding"] = this.scaffolding;
        data["trenching"] = this.trenching;
        data["fallProtection"] = this.fallProtection;
        data["fleetSafety"] = this.fleetSafety;
        data["craneSafety"] = this.craneSafety;
        data["firstAid"] = this.firstAid;
        data["pathogens"] = this.pathogens;
        data["lead"] = this.lead;
        data["confinedSpaces"] = this.confinedSpaces;
        data["lockout"] = this.lockout;
        data["forkTrucks"] = this.forkTrucks;
        data["protectiveEquipment"] = this.protectiveEquipment;
        data["hearingProtection"] = this.hearingProtection;
        data["designateFacilities"] = this.designateFacilities;
        data["coverage"] = this.coverage;
        data["contactInformation"] = this.contactInformation;
        data["whatRequires"] = this.whatRequires;
        data["whenToReport"] = this.whenToReport;
        data["whoToNotify"] = this.whoToNotify;
        data["testingProcedures"] = this.testingProcedures;
        data["reportingOfMedication"] = this.reportingOfMedication;
        data["eap"] = this.eap;
        data["progressivePolicy"] = this.progressivePolicy;
        data["obtainInformation"] = this.obtainInformation;
        data["sds"] = this.sds;
        data["hazardCommunication"] = this.hazardCommunication;
        data["labelingSystems"] = this.labelingSystems;
        data["protectiveMeasures"] = this.protectiveMeasures;
        data["alarmSystems"] = this.alarmSystems;
        data["shelterAreas"] = this.shelterAreas;
        data["musteringZones"] = this.musteringZones;
        data["accountingProcedures"] = this.accountingProcedures;
        data["hardHats"] = this.hardHats;
        data["safetyVests"] = this.safetyVests;
        data["handProtection"] = this.handProtection;
        data["footProtection"] = this.footProtection;
        data["faceProtection"] = this.faceProtection;
        data["hearingProtection2"] = this.hearingProtection2;
        data["protectiveClothing"] = this.protectiveClothing;
        data["personalFallArrest"] = this.personalFallArrest;
        data["stepLadders"] = this.stepLadders;
        data["extensionLadders"] = this.extensionLadders;
        data["capacities"] = this.capacities;
        data["properUse"] = this.properUse;
        super.toJSON(data);
        return data;
    }
}

export interface ISiteSafetyOrientationDto extends IBaseDto {
    siteSafetyOrientationId: number;
    name?: string | undefined;
    date: Date;
    projectId: number;
    project?: ProjectDto | undefined;
    generalHealth?: boolean | undefined;
    houseKeeping?: boolean | undefined;
    powerTools?: boolean | undefined;
    firePrevention?: boolean | undefined;
    welding?: boolean | undefined;
    compressedAir?: boolean | undefined;
    electricalSafety?: boolean | undefined;
    aerialLifts?: boolean | undefined;
    scaffolding?: boolean | undefined;
    trenching?: boolean | undefined;
    fallProtection?: boolean | undefined;
    fleetSafety?: boolean | undefined;
    craneSafety?: boolean | undefined;
    firstAid?: boolean | undefined;
    pathogens?: boolean | undefined;
    lead?: boolean | undefined;
    confinedSpaces?: boolean | undefined;
    lockout?: boolean | undefined;
    forkTrucks?: boolean | undefined;
    protectiveEquipment?: boolean | undefined;
    hearingProtection?: boolean | undefined;
    designateFacilities?: boolean | undefined;
    coverage?: boolean | undefined;
    contactInformation?: boolean | undefined;
    whatRequires?: boolean | undefined;
    whenToReport?: boolean | undefined;
    whoToNotify?: boolean | undefined;
    testingProcedures?: boolean | undefined;
    reportingOfMedication?: boolean | undefined;
    eap?: boolean | undefined;
    progressivePolicy?: boolean | undefined;
    obtainInformation?: boolean | undefined;
    sds?: boolean | undefined;
    hazardCommunication?: boolean | undefined;
    labelingSystems?: boolean | undefined;
    protectiveMeasures?: boolean | undefined;
    alarmSystems?: boolean | undefined;
    shelterAreas?: boolean | undefined;
    musteringZones?: boolean | undefined;
    accountingProcedures?: boolean | undefined;
    hardHats?: boolean | undefined;
    safetyVests?: boolean | undefined;
    handProtection?: boolean | undefined;
    footProtection?: boolean | undefined;
    faceProtection?: boolean | undefined;
    hearingProtection2?: boolean | undefined;
    protectiveClothing?: boolean | undefined;
    personalFallArrest?: boolean | undefined;
    stepLadders?: boolean | undefined;
    extensionLadders?: boolean | undefined;
    capacities?: boolean | undefined;
    properUse?: boolean | undefined;
}

export class ToolboxMeetingDto extends BaseDto implements IToolboxMeetingDto {
    toolboxMeetingId!: number;
    supervisor?: string | undefined;
    date!: Date;
    jobTitle?: string | undefined;
    employeeId?: string | undefined;
    location?: string | undefined;
    projectNo?: string | undefined;
    numberOfAttendees!: number;
    crewNo?: string | undefined;
    topics?: TopicDto[] | undefined;
    attendances?: AttendanceDto[] | undefined;
    projectId!: number;
    project?: ProjectDto | undefined;

    constructor(data?: IToolboxMeetingDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.toolboxMeetingId = _data["toolboxMeetingId"];
            this.supervisor = _data["supervisor"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.jobTitle = _data["jobTitle"];
            this.employeeId = _data["employeeId"];
            this.location = _data["location"];
            this.projectNo = _data["projectNo"];
            this.numberOfAttendees = _data["numberOfAttendees"];
            this.crewNo = _data["crewNo"];
            if (Array.isArray(_data["topics"])) {
                this.topics = [] as any;
                for (let item of _data["topics"])
                    this.topics!.push(TopicDto.fromJS(item));
            }
            if (Array.isArray(_data["attendances"])) {
                this.attendances = [] as any;
                for (let item of _data["attendances"])
                    this.attendances!.push(AttendanceDto.fromJS(item));
            }
            this.projectId = _data["projectId"];
            this.project = _data["project"] ? ProjectDto.fromJS(_data["project"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ToolboxMeetingDto {
        data = typeof data === 'object' ? data : {};
        let result = new ToolboxMeetingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["toolboxMeetingId"] = this.toolboxMeetingId;
        data["supervisor"] = this.supervisor;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["jobTitle"] = this.jobTitle;
        data["employeeId"] = this.employeeId;
        data["location"] = this.location;
        data["projectNo"] = this.projectNo;
        data["numberOfAttendees"] = this.numberOfAttendees;
        data["crewNo"] = this.crewNo;
        if (Array.isArray(this.topics)) {
            data["topics"] = [];
            for (let item of this.topics)
                data["topics"].push(item.toJSON());
        }
        if (Array.isArray(this.attendances)) {
            data["attendances"] = [];
            for (let item of this.attendances)
                data["attendances"].push(item.toJSON());
        }
        data["projectId"] = this.projectId;
        data["project"] = this.project ? this.project.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IToolboxMeetingDto extends IBaseDto {
    toolboxMeetingId: number;
    supervisor?: string | undefined;
    date: Date;
    jobTitle?: string | undefined;
    employeeId?: string | undefined;
    location?: string | undefined;
    projectNo?: string | undefined;
    numberOfAttendees: number;
    crewNo?: string | undefined;
    topics?: TopicDto[] | undefined;
    attendances?: AttendanceDto[] | undefined;
    projectId: number;
    project?: ProjectDto | undefined;
}

export class TopicDto extends BaseDto implements ITopicDto {
    topicId!: number;
    description?: string | undefined;

    constructor(data?: ITopicDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.topicId = _data["topicId"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): TopicDto {
        data = typeof data === 'object' ? data : {};
        let result = new TopicDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["topicId"] = this.topicId;
        data["description"] = this.description;
        super.toJSON(data);
        return data;
    }
}

export interface ITopicDto extends IBaseDto {
    topicId: number;
    description?: string | undefined;
}

export class AttendanceDto extends BaseDto implements IAttendanceDto {
    attendanceId!: number;
    name?: string | undefined;
    company?: string | undefined;
    comments?: string | undefined;

    constructor(data?: IAttendanceDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.attendanceId = _data["attendanceId"];
            this.name = _data["name"];
            this.company = _data["company"];
            this.comments = _data["comments"];
        }
    }

    static fromJS(data: any): AttendanceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AttendanceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attendanceId"] = this.attendanceId;
        data["name"] = this.name;
        data["company"] = this.company;
        data["comments"] = this.comments;
        super.toJSON(data);
        return data;
    }
}

export interface IAttendanceDto extends IBaseDto {
    attendanceId: number;
    name?: string | undefined;
    company?: string | undefined;
    comments?: string | undefined;
}

export class GoodCatchTypeDto extends BaseDto implements IGoodCatchTypeDto {
    goodCatchTypeId!: number;
    catchType?: string | undefined;

    constructor(data?: IGoodCatchTypeDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.goodCatchTypeId = _data["goodCatchTypeId"];
            this.catchType = _data["catchType"];
        }
    }

    static fromJS(data: any): GoodCatchTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new GoodCatchTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["goodCatchTypeId"] = this.goodCatchTypeId;
        data["catchType"] = this.catchType;
        super.toJSON(data);
        return data;
    }
}

export interface IGoodCatchTypeDto extends IBaseDto {
    goodCatchTypeId: number;
    catchType?: string | undefined;
}

export class WorkoutDto extends BaseDto implements IWorkoutDto {
    workoutId?: number | undefined;
    exercise?: string | undefined;
    increments!: number;
    units?: string | undefined;
    points!: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    countPoints!: boolean;

    constructor(data?: IWorkoutDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.workoutId = _data["workoutId"];
            this.exercise = _data["exercise"];
            this.increments = _data["increments"];
            this.units = _data["units"];
            this.points = _data["points"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.countPoints = _data["countPoints"];
        }
    }

    static fromJS(data: any): WorkoutDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkoutDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workoutId"] = this.workoutId;
        data["exercise"] = this.exercise;
        data["increments"] = this.increments;
        data["units"] = this.units;
        data["points"] = this.points;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["countPoints"] = this.countPoints;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkoutDto extends IBaseDto {
    workoutId?: number | undefined;
    exercise?: string | undefined;
    increments: number;
    units?: string | undefined;
    points: number;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    countPoints: boolean;
}

export class FormDto extends BaseDto implements IFormDto {
    formId!: number;
    formName?: string | undefined;
    goodCatches?: GoodCatchDto[] | undefined;
    jsas?: JsaDto[] | undefined;
    siteSafetyOrientations?: SiteSafetyOrientationDto[] | undefined;
    incidentAlerts?: IncidentAlertDto[] | undefined;
    motorizedEquipments?: MotorizedEquipmentDto[] | undefined;
    nearMisses?: NearMissDto[] | undefined;
    toolboxMeetings?: ToolboxMeetingDto[] | undefined;

    constructor(data?: IFormDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.formId = _data["formId"];
            this.formName = _data["formName"];
            if (Array.isArray(_data["goodCatches"])) {
                this.goodCatches = [] as any;
                for (let item of _data["goodCatches"])
                    this.goodCatches!.push(GoodCatchDto.fromJS(item));
            }
            if (Array.isArray(_data["jsas"])) {
                this.jsas = [] as any;
                for (let item of _data["jsas"])
                    this.jsas!.push(JsaDto.fromJS(item));
            }
            if (Array.isArray(_data["siteSafetyOrientations"])) {
                this.siteSafetyOrientations = [] as any;
                for (let item of _data["siteSafetyOrientations"])
                    this.siteSafetyOrientations!.push(SiteSafetyOrientationDto.fromJS(item));
            }
            if (Array.isArray(_data["incidentAlerts"])) {
                this.incidentAlerts = [] as any;
                for (let item of _data["incidentAlerts"])
                    this.incidentAlerts!.push(IncidentAlertDto.fromJS(item));
            }
            if (Array.isArray(_data["motorizedEquipments"])) {
                this.motorizedEquipments = [] as any;
                for (let item of _data["motorizedEquipments"])
                    this.motorizedEquipments!.push(MotorizedEquipmentDto.fromJS(item));
            }
            if (Array.isArray(_data["nearMisses"])) {
                this.nearMisses = [] as any;
                for (let item of _data["nearMisses"])
                    this.nearMisses!.push(NearMissDto.fromJS(item));
            }
            if (Array.isArray(_data["toolboxMeetings"])) {
                this.toolboxMeetings = [] as any;
                for (let item of _data["toolboxMeetings"])
                    this.toolboxMeetings!.push(ToolboxMeetingDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FormDto {
        data = typeof data === 'object' ? data : {};
        let result = new FormDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["formId"] = this.formId;
        data["formName"] = this.formName;
        if (Array.isArray(this.goodCatches)) {
            data["goodCatches"] = [];
            for (let item of this.goodCatches)
                data["goodCatches"].push(item.toJSON());
        }
        if (Array.isArray(this.jsas)) {
            data["jsas"] = [];
            for (let item of this.jsas)
                data["jsas"].push(item.toJSON());
        }
        if (Array.isArray(this.siteSafetyOrientations)) {
            data["siteSafetyOrientations"] = [];
            for (let item of this.siteSafetyOrientations)
                data["siteSafetyOrientations"].push(item.toJSON());
        }
        if (Array.isArray(this.incidentAlerts)) {
            data["incidentAlerts"] = [];
            for (let item of this.incidentAlerts)
                data["incidentAlerts"].push(item.toJSON());
        }
        if (Array.isArray(this.motorizedEquipments)) {
            data["motorizedEquipments"] = [];
            for (let item of this.motorizedEquipments)
                data["motorizedEquipments"].push(item.toJSON());
        }
        if (Array.isArray(this.nearMisses)) {
            data["nearMisses"] = [];
            for (let item of this.nearMisses)
                data["nearMisses"].push(item.toJSON());
        }
        if (Array.isArray(this.toolboxMeetings)) {
            data["toolboxMeetings"] = [];
            for (let item of this.toolboxMeetings)
                data["toolboxMeetings"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IFormDto extends IBaseDto {
    formId: number;
    formName?: string | undefined;
    goodCatches?: GoodCatchDto[] | undefined;
    jsas?: JsaDto[] | undefined;
    siteSafetyOrientations?: SiteSafetyOrientationDto[] | undefined;
    incidentAlerts?: IncidentAlertDto[] | undefined;
    motorizedEquipments?: MotorizedEquipmentDto[] | undefined;
    nearMisses?: NearMissDto[] | undefined;
    toolboxMeetings?: ToolboxMeetingDto[] | undefined;
}

export class GoodCatchDto extends BaseDto implements IGoodCatchDto {
    goodCatchId!: number;
    date!: Date;
    time?: string | undefined;
    affectedJobsiteLocation?: string | undefined;
    supervisor?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    immediateActionTaken?: string | undefined;
    divisionId?: number | undefined;
    division?: DivisionDto | undefined;
    departmentId?: number | undefined;
    department?: DepartmentDto | undefined;
    projectId?: number | undefined;
    project?: ProjectDto | undefined;
    goodCatchTypeId?: number | undefined;
    goodCatchType?: GoodCatchTypeDto | undefined;
    controlMethodId?: number | undefined;
    controlMethod?: ControlMethodDto | undefined;

    constructor(data?: IGoodCatchDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.goodCatchId = _data["goodCatchId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.time = _data["time"];
            this.affectedJobsiteLocation = _data["affectedJobsiteLocation"];
            this.supervisor = _data["supervisor"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.immediateActionTaken = _data["immediateActionTaken"];
            this.divisionId = _data["divisionId"];
            this.division = _data["division"] ? DivisionDto.fromJS(_data["division"]) : <any>undefined;
            this.departmentId = _data["departmentId"];
            this.department = _data["department"] ? DepartmentDto.fromJS(_data["department"]) : <any>undefined;
            this.projectId = _data["projectId"];
            this.project = _data["project"] ? ProjectDto.fromJS(_data["project"]) : <any>undefined;
            this.goodCatchTypeId = _data["goodCatchTypeId"];
            this.goodCatchType = _data["goodCatchType"] ? GoodCatchTypeDto.fromJS(_data["goodCatchType"]) : <any>undefined;
            this.controlMethodId = _data["controlMethodId"];
            this.controlMethod = _data["controlMethod"] ? ControlMethodDto.fromJS(_data["controlMethod"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GoodCatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new GoodCatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["goodCatchId"] = this.goodCatchId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["time"] = this.time;
        data["affectedJobsiteLocation"] = this.affectedJobsiteLocation;
        data["supervisor"] = this.supervisor;
        data["name"] = this.name;
        data["description"] = this.description;
        data["immediateActionTaken"] = this.immediateActionTaken;
        data["divisionId"] = this.divisionId;
        data["division"] = this.division ? this.division.toJSON() : <any>undefined;
        data["departmentId"] = this.departmentId;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        data["projectId"] = this.projectId;
        data["project"] = this.project ? this.project.toJSON() : <any>undefined;
        data["goodCatchTypeId"] = this.goodCatchTypeId;
        data["goodCatchType"] = this.goodCatchType ? this.goodCatchType.toJSON() : <any>undefined;
        data["controlMethodId"] = this.controlMethodId;
        data["controlMethod"] = this.controlMethod ? this.controlMethod.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGoodCatchDto extends IBaseDto {
    goodCatchId: number;
    date: Date;
    time?: string | undefined;
    affectedJobsiteLocation?: string | undefined;
    supervisor?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    immediateActionTaken?: string | undefined;
    divisionId?: number | undefined;
    division?: DivisionDto | undefined;
    departmentId?: number | undefined;
    department?: DepartmentDto | undefined;
    projectId?: number | undefined;
    project?: ProjectDto | undefined;
    goodCatchTypeId?: number | undefined;
    goodCatchType?: GoodCatchTypeDto | undefined;
    controlMethodId?: number | undefined;
    controlMethod?: ControlMethodDto | undefined;
}

export class MyWorkoutDto extends BaseDto implements IMyWorkoutDto {
    myWorkoutId?: number | undefined;
    workout?: WorkoutDto | undefined;
    workoutId?: number | undefined;
    quantity!: number;
    date!: Date;

    constructor(data?: IMyWorkoutDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.myWorkoutId = _data["myWorkoutId"];
            this.workout = _data["workout"] ? WorkoutDto.fromJS(_data["workout"]) : <any>undefined;
            this.workoutId = _data["workoutId"];
            this.quantity = _data["quantity"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MyWorkoutDto {
        data = typeof data === 'object' ? data : {};
        let result = new MyWorkoutDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["myWorkoutId"] = this.myWorkoutId;
        data["workout"] = this.workout ? this.workout.toJSON() : <any>undefined;
        data["workoutId"] = this.workoutId;
        data["quantity"] = this.quantity;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IMyWorkoutDto extends IBaseDto {
    myWorkoutId?: number | undefined;
    workout?: WorkoutDto | undefined;
    workoutId?: number | undefined;
    quantity: number;
    date: Date;
}

export class WorkoutLeadersDto implements IWorkoutLeadersDto {
    name?: string | undefined;
    points!: number;

    constructor(data?: IWorkoutLeadersDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.points = _data["points"];
        }
    }

    static fromJS(data: any): WorkoutLeadersDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkoutLeadersDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["points"] = this.points;
        return data;
    }
}

export interface IWorkoutLeadersDto {
    name?: string | undefined;
    points: number;
}

export class MyWorkoutListDto implements IMyWorkoutListDto {
    myWorkoutId!: number;
    workout?: string | undefined;
    quantity!: number;
    date!: Date;
    points!: number;

    constructor(data?: IMyWorkoutListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.myWorkoutId = _data["myWorkoutId"];
            this.workout = _data["workout"];
            this.quantity = _data["quantity"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.points = _data["points"];
        }
    }

    static fromJS(data: any): MyWorkoutListDto {
        data = typeof data === 'object' ? data : {};
        let result = new MyWorkoutListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["myWorkoutId"] = this.myWorkoutId;
        data["workout"] = this.workout;
        data["quantity"] = this.quantity;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["points"] = this.points;
        return data;
    }
}

export interface IMyWorkoutListDto {
    myWorkoutId: number;
    workout?: string | undefined;
    quantity: number;
    date: Date;
    points: number;
}

export class AccessTokenDto implements IAccessTokenDto {
    email?: string | undefined;
    token?: string | undefined;
    role?: string | undefined;
    refreshTokenId?: string | undefined;
    issued!: Date;
    expires!: Date;

    constructor(data?: IAccessTokenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.token = _data["token"];
            this.role = _data["role"];
            this.refreshTokenId = _data["refreshTokenId"];
            this.issued = _data["issued"] ? new Date(_data["issued"].toString()) : <any>undefined;
            this.expires = _data["expires"] ? new Date(_data["expires"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AccessTokenDto {
        data = typeof data === 'object' ? data : {};
        let result = new AccessTokenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["token"] = this.token;
        data["role"] = this.role;
        data["refreshTokenId"] = this.refreshTokenId;
        data["issued"] = this.issued ? this.issued.toISOString() : <any>undefined;
        data["expires"] = this.expires ? this.expires.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAccessTokenDto {
    email?: string | undefined;
    token?: string | undefined;
    role?: string | undefined;
    refreshTokenId?: string | undefined;
    issued: Date;
    expires: Date;
}

export class LoginDto implements ILoginDto {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    email?: string | undefined;
    password?: string | undefined;
}

export class EmailDto implements IEmailDto {
    email?: string | undefined;
    guid?: string | undefined;

    constructor(data?: IEmailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.guid = _data["guid"];
        }
    }

    static fromJS(data: any): EmailDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["guid"] = this.guid;
        return data;
    }
}

export interface IEmailDto {
    email?: string | undefined;
    guid?: string | undefined;
}

export class ResetPasswordDto implements IResetPasswordDto {
    email?: string | undefined;
    password?: string | undefined;
    guid?: string | undefined;

    constructor(data?: IResetPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.guid = _data["guid"];
        }
    }

    static fromJS(data: any): ResetPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["guid"] = this.guid;
        return data;
    }
}

export interface IResetPasswordDto {
    email?: string | undefined;
    password?: string | undefined;
    guid?: string | undefined;
}

export class AuthenticateRequest implements IAuthenticateRequest {
    idToken!: string;
    accessToken?: string | undefined;

    constructor(data?: IAuthenticateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idToken = _data["idToken"];
            this.accessToken = _data["accessToken"];
        }
    }

    static fromJS(data: any): AuthenticateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idToken"] = this.idToken;
        data["accessToken"] = this.accessToken;
        return data;
    }
}

export interface IAuthenticateRequest {
    idToken: string;
    accessToken?: string | undefined;
}

export class RoleDto extends BaseDto implements IRoleDto {
    roleId!: number;
    name?: string | undefined;
    users?: UserDto[] | undefined;

    constructor(data?: IRoleDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.roleId = _data["roleId"];
            this.name = _data["name"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["name"] = this.name;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IRoleDto extends IBaseDto {
    roleId: number;
    name?: string | undefined;
    users?: UserDto[] | undefined;
}

export class UserDto extends BaseDto implements IUserDto {
    userId?: number | undefined;
    email?: string | undefined;
    role?: RoleDto | undefined;
    roleId!: number;
    contactId?: number | undefined;
    contact?: ContactDto | undefined;
    isActive!: boolean;

    constructor(data?: IUserDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.email = _data["email"];
            this.role = _data["role"] ? RoleDto.fromJS(_data["role"]) : <any>undefined;
            this.roleId = _data["roleId"];
            this.contactId = _data["contactId"];
            this.contact = _data["contact"] ? ContactDto.fromJS(_data["contact"]) : <any>undefined;
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["email"] = this.email;
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        data["roleId"] = this.roleId;
        data["contactId"] = this.contactId;
        data["contact"] = this.contact ? this.contact.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        super.toJSON(data);
        return data;
    }
}

export interface IUserDto extends IBaseDto {
    userId?: number | undefined;
    email?: string | undefined;
    role?: RoleDto | undefined;
    roleId: number;
    contactId?: number | undefined;
    contact?: ContactDto | undefined;
    isActive: boolean;
}

export class ContactDto extends BaseDto implements IContactDto {
    contactId?: number | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;

    constructor(data?: IContactDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.contactId = _data["contactId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phone = _data["phone"];
        }
    }

    static fromJS(data: any): ContactDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contactId"] = this.contactId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phone"] = this.phone;
        super.toJSON(data);
        return data;
    }
}

export interface IContactDto extends IBaseDto {
    contactId?: number | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
}

export class UserGuidDto implements IUserGuidDto {
    userGuidId!: number;
    userId!: number;
    user?: UserDto | undefined;
    userGuidType!: UserGuids;
    guid?: string | undefined;
    expires!: Date;

    constructor(data?: IUserGuidDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userGuidId = _data["userGuidId"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? UserDto.fromJS(_data["user"]) : <any>undefined;
            this.userGuidType = _data["userGuidType"];
            this.guid = _data["guid"];
            this.expires = _data["expires"] ? new Date(_data["expires"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserGuidDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserGuidDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userGuidId"] = this.userGuidId;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["userGuidType"] = this.userGuidType;
        data["guid"] = this.guid;
        data["expires"] = this.expires ? this.expires.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUserGuidDto {
    userGuidId: number;
    userId: number;
    user?: UserDto | undefined;
    userGuidType: UserGuids;
    guid?: string | undefined;
    expires: Date;
}

export enum UserGuids {
    Verification = 0,
    ForgotPassword = 1,
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}